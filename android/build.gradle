buildscript {
    dependencies {
        classpath 'com.github.triplet.gradle:play-publisher:1.1.4'
        classpath 'com.android.tools.build:gradle:2.0.0-beta7'
        classpath 'com.dicedmelon.gradle:jacoco-android:+'
    }
}

subprojects {
    buildscript {
        dependencies {
            classpath "org.jacoco:org.jacoco.core:0.7.4.201502262128"
        }
    }
}
allprojects {

    repositories {
        jcenter()
        maven {
            url "https://dl.bintray.com/konikvranik/maven"
        }
    }

    buildscript {
        repositories {
            jcenter()
        }
    }
}

apply plugin: 'com.android.application'
apply plugin: 'jacoco-android'
apply plugin: 'com.github.triplet.play'

dependencies {
    compile(project(':common'))
    compile project(':androidsvg')
    compile('ch.simas.jtoggl:jtoggl:8.0.0') {
        exclude module: 'junit'
        exclude module: 'javax.inject'
        exclude module: 'jaxb-api'
    }
    compile('com.google.inject:guice:3.0') {
        exclude module: 'aopalliance'
    }
    compile 'com.android.support:support-v4:23.1.1'

    testCompile 'junit:junit:4.12'

}

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"

    defaultConfig {
        applicationId "net.suteren.worksaldo.android"
        minSdkVersion 21
        targetSdkVersion 23
        versionCode 2
        versionName "1.0-beta"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    def boolean sign = project.ext.has('pwd.keystore') && project.ext.has('pwd.key') && project.rootProject.file('local.properties').exists()
    signingConfigs {
        release {
            if (sign) {
                storeFile file("release.keystore")
                keyAlias "worksaldo"

                storePassword project.ext.get('pwd.keystore')
                keyPassword project.ext.get('pwd.key')
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if (sign) {
                signingConfig signingConfigs.release
            }
        }
        debug {
            testCoverageEnabled true
        }
    }

    packagingOptions {
        exclude 'META-INF/jersey-module-version'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE.txt'
    }

    dexOptions {
        preDexLibraries = false
    }

}

play {
    jsonFile = file('keys.json')
}

if (project.rootProject.file('local.properties').exists()) {
    Properties buildProps = new Properties()
    buildProps.load(project.rootProject.file('local.properties').newDataInputStream())
    buildProps.each { prop -> project.ext.set(prop.key, prop.value) }
} else if (project.rootProject.file('../local.properties').exists()) {
    Properties buildProps = new Properties()
    buildProps.load(project.rootProject.file('../local.properties').newDataInputStream())
    buildProps.each { prop -> project.ext.set(prop.key, prop.value) }
}


