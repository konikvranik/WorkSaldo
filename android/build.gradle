buildscript {
    repositories {
        jcenter()
        maven {
            url "https://raw.githubusercontent.com/konikvranik/m2repo/master/"
        }

    }
    dependencies {
        //classpath 'com.android.tools.build:gradle:1.2.3'
        classpath 'com.android.tools.build:gradle:1.3.1'
	classpath 'com.dicedmelon.gradle:jacoco-android:0.1.1'

    }
}

apply plugin: 'com.android.application'
apply plugin: 'jacoco-android'

repositories {
    jcenter()
    mavenLocal()
    maven {
        url "http://pandora.comerge.net:8081/nexus/content/repositories/public_snapshots/"
    }

}

ext {
  configCompileSdkVersion = 23
  configTargetSdkVersion = 23
  configBuildToolsVersion = '23.0.2'

  supportVersion = '23.0.1'
  support = [annotations: "com.android.support:support-annotations:$supportVersion",
             appCompat  : "com.android.support:appcompat-v7:$supportVersion"]

  assertJCore = 'org.assertj:assertj-core:1.7.1'
  junit = 'junit:junit:4.12'

  supportTest = [espressoCore: 'com.android.support.test.espresso:espresso-core:2.2.1',
                 rules       : 'com.android.support.test:rules:0.4.1']
}

if (project.rootProject.file('local.properties').exists()) {
    Properties buildProps = new Properties()
    buildProps.load(project.rootProject.file('local.properties').newDataInputStream())
    buildProps.each { prop ->
        project.ext.set(prop.key, prop.value)
    }
}

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"

    defaultConfig {
        applicationId "net.suteren.worksaldo.android"
        minSdkVersion 21
        targetSdkVersion 23
        versionCode 2
        versionName "1.0-beta"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

	def boolean sign = project.ext.has('pwd.keystore')&&project.ext.has('pwd.key')&&project.rootProject.file('local.properties').exists()
    signingConfigs {
        release {
			if(sign){
				storeFile file("release.keystore")
				keyAlias "worksaldo"
				
				storePassword project.ext.get('pwd.keystore')
				keyPassword project.ext.get('pwd.key')
			}
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
		if(sign){
			signingConfig signingConfigs.release
		}
	}
	debug {
      		testCoverageEnabled true
    	}
    }

    packagingOptions {
        exclude 'META-INF/jersey-module-version'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE.txt'
    }

    lintOptions {
        //disable 'InvalidPackage'
    }

    dexOptions {
        preDexLibraries = false
    }

}

project.tasks.withType(com.android.build.gradle.tasks.Dex) {
    additionalParameters = ['--core-library']
}

dependencies {
    compile project(':common')
    compile project(':androidsvg')
    compile(project(':jtoggl-api')) {
        exclude module: 'junit'
        exclude module: 'javax.inject'
        exclude module: 'jaxb-api'
    }
    compile files('libs/android-ws-combine.jar')
    compile('com.google.inject:guice:3.0') {
        exclude module: 'aopalliance'
    }
    compile('org.simpleframework:simple-xml:2.7.1') {
        exclude module: 'stax'
        exclude module: 'stax-api'
        exclude module: 'xpp3'
    }

    compile 'com.android.support:support-v4:23.1.1'

    testCompile 'junit:junit:4.12'

}
